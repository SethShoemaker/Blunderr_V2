// <auto-generated />
using System;
using Blunderr.Core.Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blunderr.Core.Data.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Blunderr.Core.Data.Entities.FileItems.FileItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FileItem");
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Created = new DateTime(2023, 4, 6, 12, 42, 13, 595, DateTimeKind.Local).AddTicks(3730),
                            Name = "Sally's Website"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 1,
                            Created = new DateTime(2023, 4, 6, 12, 42, 13, 595, DateTimeKind.Local).AddTicks(3780),
                            Name = "Sally's Mobile App"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 2,
                            Created = new DateTime(2023, 4, 6, 12, 42, 13, 595, DateTimeKind.Local).AddTicks(3790),
                            Name = "James' Website"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 2,
                            Created = new DateTime(2023, 4, 6, 12, 42, 13, 595, DateTimeKind.Local).AddTicks(3790),
                            Name = "James' Mobile App"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 3,
                            Created = new DateTime(2023, 4, 6, 12, 42, 13, 595, DateTimeKind.Local).AddTicks(3800),
                            Name = "Thomas' Website"
                        },
                        new
                        {
                            Id = 6,
                            ClientId = 3,
                            Created = new DateTime(2023, 4, 6, 12, 42, 13, 595, DateTimeKind.Local).AddTicks(3810),
                            Name = "Thomas' Mobile App"
                        },
                        new
                        {
                            Id = 7,
                            ClientId = 4,
                            Created = new DateTime(2023, 4, 6, 12, 42, 13, 595, DateTimeKind.Local).AddTicks(3810),
                            Name = "Lucas' Website"
                        },
                        new
                        {
                            Id = 8,
                            ClientId = 4,
                            Created = new DateTime(2023, 4, 6, 12, 42, 13, 595, DateTimeKind.Local).AddTicks(3820),
                            Name = "Lucas' Mobile App"
                        });
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Tickets.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubmitterId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubmitterId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 4, 6, 12, 42, 13, 595, DateTimeKind.Local).AddTicks(3830),
                            Description = "I need help",
                            Priority = 0,
                            ProjectId = 1,
                            Status = 0,
                            SubmitterId = 1,
                            Title = "Ticket",
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 4, 6, 12, 42, 13, 595, DateTimeKind.Local).AddTicks(3840),
                            Description = "I need more help",
                            Priority = 1,
                            ProjectId = 1,
                            Status = 0,
                            SubmitterId = 1,
                            Title = "Ticket 2",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2023, 4, 6, 12, 42, 13, 595, DateTimeKind.Local).AddTicks(3850),
                            Description = "Could you build this?",
                            Priority = 0,
                            ProjectId = 1,
                            Status = 0,
                            SubmitterId = 1,
                            Title = "Ticket 3",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Tickets.TicketAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FileItemId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileItemId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketAttachment");
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Tickets.TicketComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SubmitterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubmitterId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketComment");
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Tickets.TicketCommentAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FileItemId")
                        .HasColumnType("int");

                    b.Property<int>("TicketCommentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileItemId");

                    b.HasIndex("TicketCommentId");

                    b.ToTable("TicketCommentAttachment");
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Phone")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Sally@Client.com",
                            Name = "Sally Client",
                            PasswordHash = "�\"�4K�����f4$�Y�!",
                            PasswordSalt = "1319448964",
                            Phone = 1234567890,
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            Email = "James@Client.com",
                            Name = "James Client",
                            PasswordHash = "���~�/���O����Ű�ƭ",
                            PasswordSalt = "1503377391",
                            Phone = 1234567890,
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "Thomas@Client.com",
                            Name = "Thomas Client",
                            PasswordHash = "��p3����z�))uIi",
                            PasswordSalt = "2026339243",
                            Phone = 1234567890,
                            Role = 0
                        },
                        new
                        {
                            Id = 4,
                            Email = "Lucas@Client.com",
                            Name = "Lucas Client",
                            PasswordHash = "m�ۯ�\"�����~QI�����",
                            PasswordSalt = "373485992",
                            Phone = 1234567890,
                            Role = 0
                        },
                        new
                        {
                            Id = 5,
                            Email = "Jamie@LoremIpsum.com",
                            Name = "Jamie Dev",
                            PasswordHash = "Ť����С�v��Qw\\",
                            PasswordSalt = "1456109873",
                            Phone = 1234567890,
                            Role = 1
                        },
                        new
                        {
                            Id = 6,
                            Email = "Sam@LoremIpsum.com",
                            Name = "Sam Dev",
                            PasswordHash = "/���VZ�%J�]:���dv�k",
                            PasswordSalt = "231204354",
                            Phone = 1234567890,
                            Role = 1
                        },
                        new
                        {
                            Id = 7,
                            Email = "Jonathan@LoremIpsum.com",
                            Name = "Jonathan Manager",
                            PasswordHash = "�I����m��j��",
                            PasswordSalt = "1908393835",
                            Phone = 1234567890,
                            Role = 2
                        },
                        new
                        {
                            Id = 8,
                            Email = "Gerald@LoremIpsum.com",
                            Name = "Gerald Manager",
                            PasswordHash = "g�����!�wj#��2�?",
                            PasswordSalt = "1141757280",
                            Phone = 1234567890,
                            Role = 2
                        });
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Users.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Projects.Project", b =>
                {
                    b.HasOne("Blunderr.Core.Data.Entities.Users.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Tickets.Ticket", b =>
                {
                    b.HasOne("Blunderr.Core.Data.Entities.Users.User", "Developer")
                        .WithMany()
                        .HasForeignKey("DeveloperId");

                    b.HasOne("Blunderr.Core.Data.Entities.Projects.Project", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blunderr.Core.Data.Entities.Users.User", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("Project");

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Tickets.TicketAttachment", b =>
                {
                    b.HasOne("Blunderr.Core.Data.Entities.FileItems.FileItem", "FileItem")
                        .WithMany()
                        .HasForeignKey("FileItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blunderr.Core.Data.Entities.Tickets.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileItem");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Tickets.TicketComment", b =>
                {
                    b.HasOne("Blunderr.Core.Data.Entities.Users.User", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blunderr.Core.Data.Entities.Tickets.Ticket", null)
                        .WithMany("Comments")
                        .HasForeignKey("TicketId");

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Tickets.TicketCommentAttachment", b =>
                {
                    b.HasOne("Blunderr.Core.Data.Entities.FileItems.FileItem", "FileItem")
                        .WithMany()
                        .HasForeignKey("FileItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blunderr.Core.Data.Entities.Tickets.TicketComment", "TicketComment")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileItem");

                    b.Navigation("TicketComment");
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Users.UserToken", b =>
                {
                    b.HasOne("Blunderr.Core.Data.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Projects.Project", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Tickets.Ticket", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Blunderr.Core.Data.Entities.Tickets.TicketComment", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
